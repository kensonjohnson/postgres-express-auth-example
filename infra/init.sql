--------------------------------------
--- ***          Auth          *** ---
--------------------------------------
-- Create access to case-insensitive text data type
CREATE EXTENSION IF NOT EXISTS citext;

-- Create table for users
CREATE TABLE IF NOT EXISTS users(
    id bigint PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    first_name varchar(100),
    last_name varchar(100),
    email citext NOT NULL CHECK (LENGTH(email) < 255),
    email_verified boolean NOT NULL DEFAULT FALSE,
    initial_setup_complete boolean NOT NULL DEFAULT FALSE,
    credit_balance integer NOT NULL DEFAULT 0
);

-- Prevent duplicate emails in the users table
CREATE UNIQUE INDEX IF NOT EXISTS users_email_uniq ON users USING BTREE(email);

-- Needed for connect-pg-simple (session store)
CREATE TABLE IF NOT EXISTS "session"(
    "sid" varchar NOT NULL COLLATE "default",
    "sess" json NOT NULL,
    "expire" timestamp(6) NOT NULL
)
WITH (
    OIDS = FALSE
);

ALTER TABLE "session"
    DROP CONSTRAINT IF EXISTS session_pkey;

ALTER TABLE "session"
    ADD CONSTRAINT "session_pkey" PRIMARY KEY ("sid") NOT DEFERRABLE INITIALLY IMMEDIATE;

CREATE INDEX IF NOT EXISTS "IDX_session_expire" ON "session"("expire");

--------------------------------------
--- ***         Tables         *** ---
--------------------------------------
--- Todo list tables ---
CREATE TABLE IF NOT EXISTS "list"(
    id bigint PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    title varchar(255) NOT NULL,
    description text,
    user_id bigint NOT NULL REFERENCES users(id) ON DELETE CASCADE,
    created_on timestamp DEFAULT CURRENT_TIMESTAMP,
    last_updated timestamp DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE IF NOT EXISTS task(
    id bigint PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    list_id bigint NOT NULL REFERENCES LIST (id) ON DELETE CASCADE,
    title varchar(255) NOT NULL,
    description text,
    completed boolean NOT NULL DEFAULT FALSE,
    created_on timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
    last_updated timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP
);

--- Chat tables ---
CREATE TABLE IF NOT EXISTS conversation(
    id bigint PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    user_id bigint NOT NULL REFERENCES users(id) ON DELETE CASCADE,
    title varchar(255) NOT NULL,
    created_on timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
    last_updated timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE IF NOT EXISTS message(
    id bigint PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    conversation_id bigint NOT NULL REFERENCES conversation(id) ON DELETE CASCADE,
    role varchar(50) NOT NULL,
    total_token_count integer NOT NULL DEFAULT 0,
    prompt_token_count integer NOT NULL DEFAULT 0,
    response_token_count integer NOT NULL DEFAULT 0,
    content text NOT NULL,
    created_on timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP
);

--- Credit tables ---
CREATE TABLE IF NOT EXISTS credit(
    id bigint PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    user_id bigint NOT NULL REFERENCES users(id) ON DELETE CASCADE,
    amount integer NOT NULL DEFAULT 0,
    created_on timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE IF NOT EXISTS debit(
    id bigint PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    user_id bigint NOT NULL REFERENCES users(id) ON DELETE CASCADE,
    amount integer NOT NULL DEFAULT 0,
    created_on timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP
);

--------------------------------------
--- ***       Functions        *** ---
--------------------------------------
-- Create a function to update the last_updated column
CREATE OR REPLACE FUNCTION update_last_updated_column()
    RETURNS TRIGGER
    AS $$
BEGIN
    NEW.last_updated = now();
    RETURN NEW;
END;
$$
LANGUAGE 'plpgsql';

-- Create a function to update conversation last_updated column when an insert is made on message
CREATE OR REPLACE FUNCTION update_conversation_last_updated_column()
    RETURNS TRIGGER
    AS $$
BEGIN
    UPDATE
        conversation
    SET
        last_updated = now()
    WHERE
        id = NEW.conversation_id;
    RETURN NEW;
END;
$$
LANGUAGE 'plpgsql';

-- Create a function to update the credit balance
CREATE OR REPLACE FUNCTION update_credit_balance()
    RETURNS TRIGGER
    AS $$
BEGIN
    UPDATE
        users
    SET
        credit_balance =(
            SELECT
(
                    SELECT
                        COALESCE(SUM(amount), 0)
                    FROM
                        credit
                    WHERE
                        user_id = NEW.user_id
                        AND created_on > NOW() - INTERVAL '10' minute) -(
                        SELECT
                            COALESCE(SUM(amount), 0)
                        FROM
                            debit
                        WHERE
                            user_id = NEW.user_id
                            AND created_on > NOW() - INTERVAL '10' minute))
            WHERE
                id = NEW.user_id;
    RETURN NEW;
END;
$$
LANGUAGE 'plpgsql';

--Create a function to fetch the credit balance
CREATE OR REPLACE FUNCTION get_credit_balance(userid bigint)
    RETURNS integer
    AS $$
BEGIN
    RETURN(
        SELECT
            COALESCE(SUM(amount), 0)
        FROM
            credit
        WHERE
            user_id = userid
            AND created_on > NOW() - INTERVAL '10' minute) -(
        SELECT
            COALESCE(SUM(amount), 0)
        FROM
            debit
        WHERE
            user_id = userid
            AND created_on > NOW() - INTERVAL '10' minute);
END;
$$
LANGUAGE 'plpgsql';

--------------------------------------
--- ***        Triggers        *** ---
--------------------------------------
-- Create a trigger to update the last_updated column when a list is updated
CREATE OR REPLACE TRIGGER refresh_list_updated_at
    BEFORE UPDATE ON LIST
    FOR EACH ROW
    EXECUTE FUNCTION update_last_updated_column();

-- Create a trigger to update the last_updated column when a task is updated
CREATE OR REPLACE TRIGGER refresh_task_updated_at
    BEFORE UPDATE ON task
    FOR EACH ROW
    EXECUTE FUNCTION update_last_updated_column();

-- Create a trigger to update the last_updated column when a conversation is updated
CREATE OR REPLACE TRIGGER refresh_conversation_updated_at
    BEFORE UPDATE ON conversation
    FOR EACH ROW
    EXECUTE FUNCTION update_last_updated_column();

-- Create a trigger to update the last_updated column on conversation when a message is inserted
CREATE OR REPLACE TRIGGER refresh_conversation_updated_at_on_message_insert
    AFTER INSERT ON message
    FOR EACH ROW
    EXECUTE FUNCTION update_conversation_last_updated_column();

-- Create a trigger to update the credit balance when a credit is inserted
CREATE OR REPLACE TRIGGER update_credit_balance_on_credit_insert
    AFTER INSERT ON credit
    FOR EACH ROW
    EXECUTE FUNCTION update_credit_balance();

-- Create a trigger to update the credit balance when a debit is inserted
CREATE OR REPLACE TRIGGER update_credit_balance_on_debit_insert
    AFTER INSERT ON debit
    FOR EACH ROW
    EXECUTE FUNCTION update_credit_balance();

