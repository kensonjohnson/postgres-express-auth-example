-- Create access to case-insensitive text data type
CREATE EXTENSION IF NOT EXISTS citext;

-- Create table for users
CREATE TABLE IF NOT EXISTS users(
    id bigint PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    first_name varchar(100),
    last_name varchar(100),
    email citext NOT NULL CHECK (LENGTH(email) < 255),
    email_verified boolean NOT NULL DEFAULT FALSE,
    initial_setup_complete boolean NOT NULL DEFAULT FALSE
);

-- Prevent duplicate emails in the users table
CREATE UNIQUE INDEX users_email_uniq ON users USING BTREE(email);

-- Needed for connect-pg-simple (session store)
CREATE TABLE IF NOT EXISTS "session"(
    "sid" varchar NOT NULL COLLATE "default",
    "sess" json NOT NULL,
    "expire" timestamp(6) NOT NULL
)
WITH (
    OIDS = FALSE
);

ALTER TABLE "session"
    ADD CONSTRAINT "session_pkey" PRIMARY KEY ("sid") NOT DEFERRABLE INITIALLY IMMEDIATE;

CREATE INDEX "IDX_session_expire" ON "session"("expire");

-- *** Add tables for the app ***
CREATE TABLE IF NOT EXISTS LIST (
    id bigint PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    title varchar(255) NOT NULL,
    description text,
    user_id bigint NOT NULL REFERENCES users(id) ON DELETE CASCADE,
    created_on timestamp DEFAULT CURRENT_TIMESTAMP,
    last_updated timestamp DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE IF NOT EXISTS task(
    id bigint PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    list_id bigint NOT NULL REFERENCES LIST (id) ON DELETE CASCADE,
    title varchar(255) NOT NULL,
    description text,
    completed boolean NOT NULL DEFAULT FALSE,
    created_on timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
    last_updated timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP
);

-- Create a function to update the last_updated column
CREATE OR REPLACE FUNCTION update_last_updated_column()
    RETURNS TRIGGER
    AS $$
BEGIN
    NEW.last_updated = now();
    RETURN NEW;
END;
$$
LANGUAGE 'plpgsql';

-- Create a trigger to update the last_updated column when a list is updated
CREATE TRIGGER refresh_list_updated_at
    BEFORE UPDATE ON LIST
    FOR EACH ROW
    EXECUTE FUNCTION update_last_updated_column();

-- Create a trigger to update the last_updated column when a task is updated
CREATE TRIGGER refresh_task_updated_at
    BEFORE UPDATE ON task
    FOR EACH ROW
    EXECUTE FUNCTION update_last_updated_column();

